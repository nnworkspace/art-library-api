openapi: 3.0.3
info:
  description: |
    This is a server for Art Library of Alpha Org.
  version: "0.1.0"
  title: Art Library of Alpha Org
  termsOfService: 'http://TODO'
  contact:
    email: nnworkspace@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nnworkspace/artlibrary/1.0.0
  - url: 'https://artlibrary.alpha.org/api'
tags:
  - name: artwork
    description: Everything about a piece of artwork at Alpha Org
    externalDocs:
      description: Find out more
      url: 'https://github.com/nnworkspace/art-library-api'
  - name: artworks
    description: a list of artworks
  - name: lending
    description: A record of lending of an artwork to an employee in the Alpha Org.
    externalDocs:
      description: Find out more
      url: 'https://github.com/nnworkspace/art-library-api'
  - name: lendings
    description: a list of records of lendings to an employee in the Alpha Org.
paths:
  /artworks:
    get:
      tags:
        - artworks
      summary: Get a list of artworks.
      description: Returns a list of artworks. The result can be filtered by query parameters.
      operationId: getArtworks
      parameters: # TODO: add artforms and artStyles in the parameter later. Value of artForm should be enum
        - in: query
          name: title
          required: false
          schema:
            type: string
            example: Mona Lisa
          description: name of the artwork, can be a partial string of name
        - in: query
          name: description
          required: false
          schema:
            type: string
            example: Portrait painting with a mysterious smile
          description: description of the artwork, can be a partial string of description
        - in: query
          name: artists
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            minItems: 1
            example: [ 'da Vinci' , 'Monet', 'Lowry', 'Cartier-Bresson']
          description: (Partial) name of the artists, relationship between the artists in the parameter list is 'or'.
        - in: query
          name: artForm
          required: false
          schema:
            $ref: '#/components/schemas/ArtForm'
        - in: query
          name: artworkStatus
          required: false
          schema:
            $ref: '#/components/schemas/ArtworkStatus'
        - in: query
          name: availableFrom
          required: false
          schema:
            type: string
            format: date
            example: 2021-03-09
            description: The earliest date, when an artwork item will be available.
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            example: 25
          description: Specifies in response, how many records should be contained in a page.
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            example: 100
          description: Specifies how many records should be skipped.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtworksResponse'
        '400':
          description: Invalid query parameters supplied
        '404':
          description: No artworks found
      security:
        - api_key: [ ]
    post:
      tags:
        - artwork
      summary: create an artwork in the artwork list
      operationId: addArtwork
      responses:
        '405':
          description: Invalid input
      security:
        - artworks_auth:
            - 'write:artworks'
            - 'read:artworks'
      requestBody:
        $ref: '#/components/requestBodies/NewArtwork'
  '/artworks/{artworkId}':
    get:
      tags:
        - artwork
      summary: Find artwork by ID.
      description: Returns a single artwork with its properties such as name, description, artists, storage location, etc.
      operationId: getArtworkById
      parameters:
        - in: path
          name: artworkId
          description: ID of a artwork. ID of an artwork is a combination of the artist name and the artwork name and optional integer identifier
          example: da-vinci-mona-lisa
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
        '400':
          description: Invalid ID supplied
        '404':
          description: Artwork not found
      security:
        - api_key: []
    put:
      tags:
        - artwork
      summary: Replace a artwork
      operationId: replaceColorAtSelfURL
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: artworkId
          in: path
          description: Artwork id to replace
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid artworkId supplied
        '404':
          description: Artwork not found
        '405':
          description: Validation exception
      security:
        - artworks_auth:
            - 'write:artworks'
            - 'read:artworks'
      requestBody:
        $ref: '#/components/requestBodies/Artwork'
    patch:
      tags:
        - artwork
      summary: Update an exisiting artwork
      operationId: updateArtwork
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: artworkId
          in: path
          description: Artwork id to update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid artworkId supplied
        '404':
          description: Artwork not found
        '405':
          description: Validation exception
      security:
        - artworks_auth:
            - 'write:artworks'
            - 'read:artworks'
      requestBody:
        $ref: '#/components/requestBodies/Artwork'  # TODO: This should not be the full Artwork object, fix later.
    delete:
      tags:
        - artwork
      summary: Deletes a piece of artwork
      operationId: deleteArtwork
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: artworkId
          in: path
          description: Id of the artwork to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Artwork not found
      security:
        - artworks_auth:
            - 'write:artworks'
            - 'read:artworks'
  '/artworks/{artworkId}/images':
    post:
      tags:
        - artwork
      summary: uploads an image
      operationId: uploadImage
      parameters:
        - name: artworkId
          in: path
          description: ID of the artwork
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - artworks_auth:
            - 'write:artworks'
            - 'read:artworks'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    ArtForm:
      type: string
      enum: [painting, photograph, print, sculpture, assemblage, collage]
    ArtworkStatus:
      type: string
      enum: ['available', 'reserved', 'in use', 'return reported', 'record deleted']
    NewArtwork:
      type: object
      required:
        - title
        - artForm
        - storageLocation
        - status
        - nextAvailableDate
        - createdOn
        - createdBy
        - lastUpdatedOn
        - lastUpdatedBy
      properties:
        title:
          type: string
          example: Mona Lisa
          nullable: false
        artForm:
          nullable: false
          type: string
          enum: [ painting, photograph, print, sculpture, assemblage, collage ]
        description:
          type: string
          example: >-
            Portrait painting with a mysterious smile
        storageLocation:
          type: string
          example: building 12 room 304 shelf 5 slot 67
          nullable: false
        artist:
          type: string
          example: Leonardo da Vinci
        producer:
          type: string
          description: If the artwork is a print or other manufactured article, record the publisher or manufacturer here.
          example: Fine Art Production Co. Ltd, London, UK.
        productSerialNumber:
          type: string
          description: If the artwork has a serial number, record it in this property.
          example: TSN3987528
        imageUrls:
          type: array
          items:
            type: string
        dateObtained:
          type: string
          format: date
          example: 1998-08-08
          description: The date when Alpha Org obtained this piece of artwork.
        marketValue:
          type: number
          format: currency
          description: Market value of this piece of artwork. Unit in Euro.
          example: 288.88
        status:
          nullable: false
          type: string
          enum: ['available', 'reserved', 'in use', 'return reported', 'not for lending', 'record deleted']
          description: Status of this artwork in alpha org.
          default: available
          example: available
        nextAvailableDate:
          nullable: false
          type: string
          format: date
          description: Nearst next date when this artwork is available for lending.
          example: 2021-02-28
        comment:
          type: string
          description: Any comment about this artwork
          example: This piece has a weak corner which looks a bit funny
        createdOn:
          nullable: false
          type: string
          format: date-time
          description: Date and time when this record is created.
          default: 2021-02-28T08:36:58Z
          example: 2021-02-28T08:36:58Z
        createdBy:
          nullable: false
          type: string
          description: User id of the admin who created this record.
          default: user id of current admin
          example: ab1235cde
        lastUpdatedOn:
          nullable: false
          type: string
          format: date-time
          description: Time of last update of this record, a timestamp.
          default: 2021-02-28T08:36:58Z
          example: 2021-02-28T08:36:58Z
        lastUpdatedBy:
          nullable: false
          type: string
          description: User id of the admin who last updated this record.
          default: user id of current admin
          example: ab1235cde
    Artwork:
      allOf:
        - $ref: '#/components/schemas/NewArtwork'
        - type: object
          required:
            - id
            - self
          # other properties that a new artwork does not have
          properties:
            id:
              nullable: false
              type: string
              description: ID of a artwork. ID of an artwork is a combination of the artist name and the artwork name and optional integer identifier
              example: da-vinci-mona-lisa
            self:
              nullable: false
              type: string
              format: uri
              example: artworks/da-vinci-mona-lisa
            lendings:
              type: array
              items:
                $ref: 'art-library-lending-api.yml#/components/schemas/LendingMeta'
                description: Metadata of a Lending record, including lenderId, artworkId, start- and end-date of the lending, etc.
              description: A list of lending records of this piece of artwork. If this artwork does not have any lending history, this array can be null.
    ArtworkMeta:
      type: object
      required:
        - id
        - self
        - title
        - artForm
        - storageLocation
        - status
        - nextAvailableDate
      properties:
        id:
          nullable: false
          type: string
          description: ID of a artwork. ID of an artwork is a combination of the artist name and the artwork name and optional integer identifier
          example: da-vinci-mona-lisa
        self:
          nullable: false
          type: string
          format: uri
          example: artworks/da-vinci-mona-lisa
        title:
          nullable: false
          type: string
          example: Mona Lisa
        artForm:
          nullable: false
          type: string
          enum: [ painting, photograph, print, sculpture, assemblage, collage ]
        description:
          type: string
          example: >-
            Portrait painting with a mysterious smile
        storageLocation:
          type: string
          example: building 12 room 304 shelf 5 slot 67
          nullable: false
        artist:
          type: string
          example: Leonardo da Vinci
        imageUrls:
          type: array
          items:
            type: string
        producer:
          type: string
          description: If the artwork is a print or other manufactured article, record the publisher or manufacturer here.
          example: Fine Art Production Co. Ltd, London, UK.
        productSerialNumber:
          type: string
          description: If the artwork has a serial number, record it in this property.
          example: TSN3987528
        dateObtained:
          type: string
          format: date
          example: 1998-08-08
          description: The date when Alpha Org obtained this piece of artwork.
        marketValue:
          type: number
          format: currency
          description: Market value of this piece of artwork. Unit in Euro.
          example: 288.88
        status:
          nullable: false
          type: string
          enum: [ 'available', 'reserved', 'in use', 'return reported', 'record deleted' ]
          description: Status of this artwork in alpha org.
          default: available
          example: available
        nextAvailableDate:
          nullable: false
          type: string
          format: date
          description: Nearst next date when this artwork is available for lending.
          example: 2021-02-28
        comment:
          type: string
          description: Any comment about this artwork
          example: This piece has a weak corner which looks a bit funny
    ArtworksResponse: # Can be referenced as '#/components/schemas/ArtworksResponse'
      type: object
      properties:   # Add some metadata of the list
        totalArtworks:
          type: integer
          minimum: 0
          example: 123
        artworkMetas:
          type: array
          items:
            $ref: '#/components/schemas/ArtworkMeta'
    Tag:  # Can be referenced as '#/components/schemas/Tag'
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        self:
          type: string  # URL to the object itself
          format: uri
        name:
          type: string
          example: impressionism
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  requestBodies:
    NewArtwork:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewArtwork'
      description: A new Artwork object to be created on the server
      required: true
    Artwork:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Artwork'
      description: Artwork object to be updated on the server
      required: true
  securitySchemes:
    api_key: # name for the API Key authentication scheme
      type: apiKey
      in: header
      name: X-API-Key # name of the HTTP header
    artworks_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://artworks.swagger.io/oauth/dialog'
          scopes:
            'write:artworks': create artworks, modify properties of artworks
            'read:artworks': read artworks

  #-------------------------------
  # Reusable responses
  #-------------------------------
